{"ast":null,"code":"import React from 'react';\nimport classNames from 'classnames';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar usePagination = function usePagination(_ref) {\n  var currentPage = _ref.currentPage,\n      setCurrentPage = _ref.setCurrentPage,\n      _ref$truncableText = _ref.truncableText,\n      truncableText = _ref$truncableText === void 0 ? \"...\" : _ref$truncableText,\n      _ref$truncableClassNa = _ref.truncableClassName,\n      truncableClassName = _ref$truncableClassNa === void 0 ? \"\" : _ref$truncableClassNa,\n      totalPages = _ref.totalPages,\n      edgePageCount = _ref.edgePageCount,\n      middlePagesSiblingCount = _ref.middlePagesSiblingCount;\n  var pages = Array(totalPages).fill(0).map(function (_, i) {\n    return i + 1;\n  });\n  var hasPreviousPage = currentPage > 1;\n  var hasNextPage = currentPage < totalPages;\n  var isReachedToFirst = currentPage <= middlePagesSiblingCount;\n  var isReachedToLast = currentPage + middlePagesSiblingCount >= totalPages;\n  var middlePages = React.useMemo(function () {\n    var middlePageCount = middlePagesSiblingCount * 2 + 1;\n\n    if (isReachedToFirst) {\n      return pages.slice(0, middlePageCount);\n    }\n\n    if (isReachedToLast) {\n      return pages.slice(-middlePageCount);\n    }\n\n    return pages.slice(currentPage - middlePagesSiblingCount, currentPage + middlePagesSiblingCount + 1);\n  }, [currentPage, pages]);\n\n  var getAllPreviousPages = function getAllPreviousPages() {\n    return pages.slice(0, middlePages[0] - 1);\n  };\n\n  var previousPages = React.useMemo(function () {\n    if (isReachedToFirst || getAllPreviousPages().length < 1) {\n      return [];\n    }\n\n    return pages.slice(0, edgePageCount).filter(function (p) {\n      return !middlePages.includes(p);\n    });\n  }, [currentPage, pages]);\n  var getAllNextPages = React.useMemo(function () {\n    return pages.slice(middlePages[middlePages.length - 1], pages[pages.length]);\n  }, [pages, middlePages]);\n  var nextPages = React.useMemo(function () {\n    if (isReachedToLast) {\n      return [];\n    }\n\n    if (getAllNextPages.length < 1) {\n      return [];\n    }\n\n    return pages.slice(pages.length - edgePageCount, pages.length).filter(function (p) {\n      return !middlePages.includes(p);\n    });\n  }, [middlePages, pages]);\n  var isPreviousTruncable = React.useMemo(function () {\n    // Is truncable if first value of middlePage is larger than last value of previousPages\n    return middlePages[0] > previousPages[previousPages.length - 1] + 1;\n  }, [previousPages, middlePages]);\n  var isNextTruncable = React.useMemo(function () {\n    // Is truncable if last value of middlePage is larger than first value of previousPages\n    return middlePages[middlePages.length - 1] + 1 < nextPages[0];\n  }, [nextPages, middlePages]);\n  return {\n    currentPage: currentPage,\n    setCurrentPage: setCurrentPage,\n    truncableText: truncableText,\n    truncableClassName: truncableClassName,\n    pages: pages,\n    hasPreviousPage: hasPreviousPage,\n    hasNextPage: hasNextPage,\n    previousPages: previousPages,\n    isPreviousTruncable: isPreviousTruncable,\n    middlePages: middlePages,\n    isNextTruncable: isNextTruncable,\n    nextPages: nextPages\n  };\n};\n\nvar PrevButton = function PrevButton(_ref) {\n  var _as$props$children;\n\n  var className = _ref.className,\n      children = _ref.children,\n      dataTestId = _ref.dataTestId,\n      _ref$as = _ref.as,\n      as = _ref$as === void 0 ? React.createElement(\"button\", null) : _ref$as,\n      buttonProps = _objectWithoutPropertiesLoose(_ref, [\"className\", \"children\", \"dataTestId\", \"as\"]);\n\n  var pagination = React.useContext(PaginationContext);\n\n  var previous = function previous() {\n    if (pagination.currentPage + 1 > 1) {\n      pagination.setCurrentPage(pagination.currentPage - 1);\n    }\n  };\n\n  var disabled = pagination.currentPage === 0;\n  return React.createElement(as.type, Object.assign({}, buttonProps, as.props, {\n    className: classNames(className, as.props.className),\n    onClick: function onClick() {\n      return previous();\n    },\n    tabIndex: disabled ? \"-1\" : 0,\n    disabled: disabled,\n    \"data-testid\": dataTestId,\n    onKeyPress: function onKeyPress(event) {\n      event.preventDefault();\n\n      if (event.key === \"Enter\" && !disabled) {\n        previous();\n      }\n    }\n  }), (_as$props$children = as.props.children) != null ? _as$props$children : children);\n};\n\nvar NextButton = function NextButton(_ref2) {\n  var _as$props$children2;\n\n  var className = _ref2.className,\n      children = _ref2.children,\n      dataTestId = _ref2.dataTestId,\n      _ref2$as = _ref2.as,\n      as = _ref2$as === void 0 ? React.createElement(\"button\", null) : _ref2$as,\n      buttonProps = _objectWithoutPropertiesLoose(_ref2, [\"className\", \"children\", \"dataTestId\", \"as\"]);\n\n  var pagination = React.useContext(PaginationContext);\n\n  var next = function next() {\n    if (pagination.currentPage + 1 < pagination.pages.length) {\n      pagination.setCurrentPage(pagination.currentPage + 1);\n    }\n  };\n\n  var disabled = pagination.currentPage === pagination.pages.length - 1;\n  return React.createElement(as.type, Object.assign({}, buttonProps, as.props, {\n    className: classNames(className, as.props.className),\n    onClick: function onClick() {\n      return next();\n    },\n    tabIndex: disabled ? \"-1\" : 0,\n    disabled: disabled,\n    \"data-testid\": dataTestId,\n    onKeyPress: function onKeyPress(event) {\n      event.preventDefault();\n\n      if (event.key === \"Enter\" && !disabled) {\n        next();\n      }\n    }\n  }), (_as$props$children2 = as.props.children) != null ? _as$props$children2 : children);\n};\n\nvar TruncableElement = function TruncableElement(_ref3) {\n  var prev = _ref3.prev;\n  var pagination = React.useContext(PaginationContext);\n  var isPreviousTruncable = pagination.isPreviousTruncable,\n      isNextTruncable = pagination.isNextTruncable,\n      truncableText = pagination.truncableText,\n      truncableClassName = pagination.truncableClassName;\n  return isPreviousTruncable && prev === true || isNextTruncable && !prev ? React.createElement(\"li\", {\n    className: truncableClassName || undefined\n  }, truncableText) : null;\n};\n\nvar PageButton = function PageButton(_ref4) {\n  var _ref4$as = _ref4.as,\n      as = _ref4$as === void 0 ? React.createElement(\"a\", null) : _ref4$as,\n      className = _ref4.className,\n      dataTestIdActive = _ref4.dataTestIdActive,\n      dataTestIdInactive = _ref4.dataTestIdInactive,\n      activeClassName = _ref4.activeClassName,\n      inactiveClassName = _ref4.inactiveClassName;\n  var pagination = React.useContext(PaginationContext);\n\n  var renderPageButton = function renderPageButton(page) {\n    var _classNames;\n\n    return React.createElement(\"li\", {\n      key: page\n    }, React.createElement(as.type, Object.assign({\n      \"data-testid\": classNames((_classNames = {}, _classNames[\"\" + dataTestIdActive] = dataTestIdActive && pagination.currentPage + 1 === page, _classNames[dataTestIdInactive + \"-\" + page] = dataTestIdActive && pagination.currentPage + 1 !== page, _classNames)) || undefined,\n      tabIndex: 0,\n      onKeyPress: function onKeyPress(event) {\n        if (event.key === \"Enter\") {\n          pagination.setCurrentPage(page - 1);\n        }\n      },\n      onClick: function onClick() {\n        return pagination.setCurrentPage(page - 1);\n      },\n      className: classNames(className, pagination.currentPage + 1 === page ? activeClassName : inactiveClassName)\n    }, as.props), page));\n  };\n\n  return React.createElement(React.Fragment, null, pagination.previousPages.map(renderPageButton), React.createElement(TruncableElement, {\n    prev: true\n  }), pagination.middlePages.map(renderPageButton), React.createElement(TruncableElement, null), pagination.nextPages.map(renderPageButton));\n};\n\nvar defaultState = {\n  currentPage: 0,\n  setCurrentPage: function setCurrentPage() {},\n  truncableText: \"...\",\n  truncableClassName: \"\",\n  pages: [],\n  hasPreviousPage: false,\n  hasNextPage: false,\n  previousPages: [],\n  isPreviousTruncable: false,\n  middlePages: [],\n  isNextTruncable: false,\n  nextPages: []\n};\nvar PaginationContext = /*#__PURE__*/React.createContext(defaultState);\n\nvar Pagination = function Pagination(_ref5) {\n  var dataTestId = _ref5.dataTestId,\n      paginationProps = _objectWithoutPropertiesLoose(_ref5, [\"dataTestId\"]);\n\n  var pagination = usePagination(paginationProps);\n  return React.createElement(PaginationContext.Provider, {\n    value: pagination\n  }, React.createElement(\"div\", {\n    className: paginationProps.className,\n    \"data-testid\": dataTestId\n  }, paginationProps.children));\n};\n\nPagination.PrevButton = PrevButton;\nPagination.NextButton = NextButton;\nPagination.PageButton = PageButton;\nexport { NextButton, PageButton, Pagination, PrevButton };","map":{"version":3,"mappings":"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","names":["usePagination","currentPage","setCurrentPage","truncableText","_ref$truncableText","truncableClassName","_ref$truncableClassNa","totalPages","edgePageCount","middlePagesSiblingCount","pages","Array","fill","map","_","i","hasPreviousPage","hasNextPage","isReachedToFirst","isReachedToLast","middlePages","React","useMemo","middlePageCount","slice","getAllPreviousPages","previousPages","length","filter","p","includes","getAllNextPages","nextPages","isPreviousTruncable","isNextTruncable","PrevButton","className","children","dataTestId","as","_ref$as","buttonProps","pagination","useContext","PaginationContext","previous","disabled","type","props","classNames","onClick","tabIndex","onKeyPress","event","preventDefault","key","NextButton","_ref2$as","next","TruncableElement","prev","undefined","PageButton","_ref4$as","dataTestIdActive","dataTestIdInactive","activeClassName","inactiveClassName","renderPageButton","page","defaultState","createContext","Pagination","paginationProps","Provider","value"],"sources":["C:\\Users\\yaelc\\PycharmProjects\\Pokedex\\client\\node_modules\\react-headless-pagination\\src\\Hooks\\usePagination.ts","C:\\Users\\yaelc\\PycharmProjects\\Pokedex\\client\\node_modules\\react-headless-pagination\\src\\Pagination\\Pagination.tsx"],"sourcesContent":["import React from \"react\";\nimport { IPaginationProps, IUsePagination } from \"../types/types\";\n\nconst usePagination = ({\n  currentPage,\n  setCurrentPage,\n  truncableText = \"...\",\n  truncableClassName = \"\",\n  totalPages,\n  edgePageCount,\n  middlePagesSiblingCount,\n}: IPaginationProps): IUsePagination => {\n  const pages = Array(totalPages)\n    .fill(0)\n    .map((_, i) => i + 1);\n\n  const hasPreviousPage = currentPage > 1;\n  const hasNextPage = currentPage < totalPages;\n\n  const isReachedToFirst = currentPage <= middlePagesSiblingCount;\n  const isReachedToLast = currentPage + middlePagesSiblingCount >= totalPages;\n\n  const middlePages = React.useMemo(() => {\n    const middlePageCount = middlePagesSiblingCount * 2 + 1;\n    if (isReachedToFirst) {\n      return pages.slice(0, middlePageCount);\n    }\n    if (isReachedToLast) {\n      return pages.slice(-middlePageCount);\n    }\n    return pages.slice(\n      currentPage - middlePagesSiblingCount,\n      currentPage + middlePagesSiblingCount + 1,\n    );\n  }, [currentPage, pages]);\n\n  const getAllPreviousPages = () => {\n    return pages.slice(0, middlePages[0] - 1);\n  };\n\n  const previousPages = React.useMemo(() => {\n    if (isReachedToFirst || getAllPreviousPages().length < 1) {\n      return [];\n    }\n    return pages\n      .slice(0, edgePageCount)\n      .filter((p) => !middlePages.includes(p));\n  }, [currentPage, pages]);\n\n  const getAllNextPages = React.useMemo(() => {\n    return pages.slice(\n      middlePages[middlePages.length - 1],\n      pages[pages.length],\n    );\n  }, [pages, middlePages]);\n\n  const nextPages = React.useMemo(() => {\n    if (isReachedToLast) {\n      return [];\n    }\n    if (getAllNextPages.length < 1) {\n      return [];\n    }\n    return pages\n      .slice(pages.length - edgePageCount, pages.length)\n      .filter((p) => !middlePages.includes(p));\n  }, [middlePages, pages]);\n\n  const isPreviousTruncable = React.useMemo(() => {\n    // Is truncable if first value of middlePage is larger than last value of previousPages\n    return middlePages[0] > previousPages[previousPages.length - 1] + 1;\n  }, [previousPages, middlePages]);\n\n  const isNextTruncable = React.useMemo(() => {\n    // Is truncable if last value of middlePage is larger than first value of previousPages\n    return middlePages[middlePages.length - 1] + 1 < nextPages[0];\n  }, [nextPages, middlePages]);\n\n  return {\n    currentPage,\n    setCurrentPage,\n    truncableText,\n    truncableClassName,\n    pages,\n    hasPreviousPage,\n    hasNextPage,\n    previousPages,\n    isPreviousTruncable,\n    middlePages,\n    isNextTruncable,\n    nextPages,\n  };\n};\n\nexport default usePagination;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport usePagination from \"../Hooks/usePagination\";\nimport {\n  IPagination,\n  IPaginationProps,\n  ButtonProps,\n  PageButtonProps,\n} from \"../types/types\";\n\nexport const PrevButton = ({\n  className,\n  children,\n  dataTestId,\n  as = <button />,\n  ...buttonProps\n}: ButtonProps) => {\n  const pagination = React.useContext(PaginationContext);\n  const previous = () => {\n    if (pagination.currentPage + 1 > 1) {\n      pagination.setCurrentPage(pagination.currentPage - 1);\n    }\n  };\n\n  const disabled = pagination.currentPage === 0;\n\n  return (\n    <as.type\n      {...buttonProps}\n      {...as.props}\n      className={classNames(className, as.props.className)}\n      onClick={() => previous()}\n      tabIndex={disabled ? \"-1\" : 0}\n      disabled={disabled}\n      data-testid={dataTestId}\n      onKeyPress={(event: React.KeyboardEvent) => {\n        event.preventDefault();\n        if (event.key === \"Enter\" && !disabled) {\n          previous();\n        }\n      }}\n    >\n      {as.props.children ?? children}\n    </as.type>\n  );\n};\n\nexport const NextButton = ({\n  className,\n  children,\n  dataTestId,\n  as = <button />,\n  ...buttonProps\n}: ButtonProps) => {\n  const pagination = React.useContext(PaginationContext);\n  const next = () => {\n    if (pagination.currentPage + 1 < pagination.pages.length) {\n      pagination.setCurrentPage(pagination.currentPage + 1);\n    }\n  };\n\n  const disabled = pagination.currentPage === pagination.pages.length - 1;\n\n  return (\n    <as.type\n      {...buttonProps}\n      {...as.props}\n      className={classNames(className, as.props.className)}\n      onClick={() => next()}\n      tabIndex={disabled ? \"-1\" : 0}\n      disabled={disabled}\n      data-testid={dataTestId}\n      onKeyPress={(event: React.KeyboardEvent) => {\n        event.preventDefault();\n        if (event.key === \"Enter\" && !disabled) {\n          next();\n        }\n      }}\n    >\n      {as.props.children ?? children}\n    </as.type>\n  );\n};\n\ntype ITruncableElementProps = {\n  prev?: boolean;\n};\n\nconst TruncableElement = ({ prev }: ITruncableElementProps) => {\n  const pagination: IPagination = React.useContext(PaginationContext);\n\n  const {\n    isPreviousTruncable,\n    isNextTruncable,\n    truncableText,\n    truncableClassName,\n  } = pagination;\n\n  return (isPreviousTruncable && prev === true) ||\n    (isNextTruncable && !prev) ? (\n      <li className={truncableClassName || undefined}>{truncableText}</li>\n    ) : null;\n};\n\nexport const PageButton = ({\n  as = <a />,\n  className,\n  dataTestIdActive,\n  dataTestIdInactive,\n  activeClassName,\n  inactiveClassName,\n}: PageButtonProps) => {\n  const pagination: IPagination = React.useContext(PaginationContext);\n\n  const renderPageButton = (page: number) => (\n    <li key={page}>\n      <as.type\n        data-testid={\n          classNames({\n            [`${dataTestIdActive}`]:\n              dataTestIdActive && pagination.currentPage + 1 === page,\n            [`${dataTestIdInactive}-${page}`]:\n              dataTestIdActive && pagination.currentPage + 1 !== page,\n          }) || undefined\n        }\n        tabIndex={0}\n        onKeyPress={(event: React.KeyboardEvent) => {\n          if (event.key === \"Enter\") {\n            pagination.setCurrentPage(page - 1);\n          }\n        }}\n        onClick={() => pagination.setCurrentPage(page - 1)}\n        className={classNames(\n          className,\n          pagination.currentPage + 1 === page\n            ? activeClassName\n            : inactiveClassName,\n        )}\n        {...as.props}\n      >\n        {page}\n      </as.type>\n    </li>\n  );\n\n  return (\n    <>\n      {pagination.previousPages.map(renderPageButton)}\n      <TruncableElement prev />\n      {pagination.middlePages.map(renderPageButton)}\n      <TruncableElement />\n      {pagination.nextPages.map(renderPageButton)}\n    </>\n  );\n};\n\nconst defaultState: IPagination = {\n  currentPage: 0,\n  setCurrentPage: () => { },\n  truncableText: \"...\",\n  truncableClassName: \"\",\n  pages: [],\n  hasPreviousPage: false,\n  hasNextPage: false,\n  previousPages: [],\n  isPreviousTruncable: false,\n  middlePages: [],\n  isNextTruncable: false,\n  nextPages: [],\n};\n\nconst PaginationContext: React.Context<IPagination> =\n  React.createContext<IPagination>(defaultState);\n\nexport const Pagination = ({\n  dataTestId,\n  ...paginationProps\n}: IPaginationProps & { dataTestId?: string }) => {\n  const pagination = usePagination(paginationProps);\n\n  return (\n    <PaginationContext.Provider value={pagination}>\n      <div className={paginationProps.className} data-testid={dataTestId}>\n        {paginationProps.children}\n      </div>\n    </PaginationContext.Provider>\n  );\n};\n\nPagination.PrevButton = PrevButton;\nPagination.NextButton = NextButton;\nPagination.PageButton = PageButton;\n"]},"metadata":{},"sourceType":"module"}