{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\n\nconst Pagination = _ref => {\n  let {\n    onPageChange,\n    currentPage = 1,\n    totalItems,\n    itemsPerPage = 10,\n    startLabel = '<<',\n    prevLabel = '<',\n    nextLabel = '>',\n    endLabel = '>>',\n    pageNeighbours = 4,\n    withProgressBar = false,\n    onlyPageNumbers = false,\n    withGoToInput = false,\n    onlyPaginationButtons = false,\n    customClassNames = {}\n  } = _ref;\n\n  const classNames = classes => {\n    return Object.entries(classes).filter(_ref2 => {\n      let [, value] = _ref2;\n      return value;\n    }).map(_ref3 => {\n      let [key] = _ref3;\n      return key;\n    }).join(' ');\n  };\n\n  const [pagiState, setPagiState] = useState();\n  const [goToInputValue, setGoToInputValue] = useState('');\n  const styleClassName = {\n    rpbRootClassName: customClassNames.rpbRootClassName || 'rpb-root',\n    rpbItemClassName: customClassNames.rpbItemClassName || 'rpb-item',\n    rpbItemClassNameActive: customClassNames.rpbItemClassNameActive || 'rpb-item--active',\n    rpbItemClassNameDisable: customClassNames.rpbItemClassNameDisable || 'rpb-item--disabled',\n    rpbProgressClassName: customClassNames.rpbProgressClassName || 'rpb-progress',\n    rpbGoItemClassName: customClassNames.rpbGoItemClassName || 'rpb-go-item'\n  };\n  /**\r\n   * Set new page when currentPage updates\r\n   */\n\n  useEffect(() => {\n    setPage(currentPage);\n  }, [currentPage]);\n\n  const setPage = page => {\n    // Disable clicking on a non-existent page\n    if (page < 1 || pagiState && page > pagiState.totalPages || typeof page !== 'number' || isNaN(page)) {\n      return;\n    } // Remove the first rendering, and also cancel the click on the active page\n\n\n    if (page === currentPage) {\n      return;\n    } // Send current page outside component\n\n\n    onPageChange(page);\n  };\n\n  const pagesList = useMemo(() => {\n    const totalPages = Math.ceil(totalItems / itemsPerPage);\n    let startPage;\n    let endPage;\n\n    if (totalPages <= pageNeighbours * 2 + 1) {\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      if (currentPage <= pageNeighbours) {\n        startPage = 1;\n        endPage = pageNeighbours * 2 + 1;\n      } else if (currentPage + pageNeighbours >= totalPages) {\n        startPage = totalPages - pageNeighbours * 2;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - pageNeighbours;\n        endPage = currentPage + pageNeighbours;\n      }\n    }\n\n    return [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i);\n  }, [totalItems, itemsPerPage, currentPage]);\n  useEffect(() => {\n    setPagiState({\n      pages: pagesList,\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pagesLength: pagesList.length,\n      totalPages: Math.ceil(totalItems / itemsPerPage) // all pages list length\n\n    });\n  }, [pagesList]);\n\n  const onGoToPageSubmitHandle = () => {\n    const value = Number(goToInputValue);\n\n    if (pagiState) {\n      if (value <= 0) {\n        setPage(1);\n      } else if (value > pagiState.totalPages) {\n        setPage(pagiState.totalPages);\n      } else {\n        setPage(value);\n      }\n    }\n  };\n\n  if (pagiState && totalItems > itemsPerPage) {\n    return React.createElement(\"nav\", {\n      className: styleClassName.rpbRootClassName\n    }, React.createElement(\"ul\", {\n      id: \"rpb-pagination\",\n      \"aria-label\": `Pagination Navigation, Current Page ${pagiState.currentPage}`\n    }, !onlyPageNumbers && React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(\"button\", {\n      className: classNames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameDisable]: pagiState.currentPage === 1\n      }),\n      \"aria-label\": 'Go to first page',\n      onClick: () => setPage(1)\n    }, startLabel)), React.createElement(\"li\", null, React.createElement(\"button\", {\n      className: classNames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameDisable]: pagiState.currentPage === 1\n      }),\n      \"aria-label\": 'Go to previous page',\n      onClick: () => setPage(pagiState.currentPage - 1)\n    }, prevLabel))), !onlyPaginationButtons && pagiState.pages && pagiState.pages.map((mappedPage, index) => React.createElement(\"li\", {\n      key: index\n    }, React.createElement(\"button\", {\n      \"aria-label\": `Go to Page ${mappedPage}`,\n      \"aria-current\": pagiState.currentPage === mappedPage,\n      onClick: () => setPage(mappedPage),\n      className: classNames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameActive]: pagiState.currentPage === mappedPage\n      })\n    }, mappedPage))), !onlyPageNumbers && React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(\"button\", {\n      onClick: () => setPage(pagiState.currentPage + 1),\n      \"aria-label\": \"Go to next page\",\n      className: classNames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameDisable]: pagiState.currentPage === pagiState.totalPages\n      })\n    }, nextLabel)), React.createElement(\"li\", null, React.createElement(\"button\", {\n      className: classNames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameDisable]: pagiState.currentPage === pagiState.totalPages\n      }),\n      \"aria-label\": 'Go to last page',\n      onClick: () => setPage(pagiState.totalPages)\n    }, endLabel))), withGoToInput && React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(\"div\", {\n      className: styleClassName.rpbGoItemClassName\n    }, React.createElement(\"input\", {\n      type: \"number\",\n      onChange: e => setGoToInputValue(e.target.value)\n    }))), React.createElement(\"li\", null, React.createElement(\"button\", {\n      className: styleClassName.rpbItemClassName,\n      onClick: onGoToPageSubmitHandle\n    }, \"Go\")))), withProgressBar && React.createElement(\"div\", {\n      role: \"progressbar\",\n      \"aria-valuenow\": pagiState.currentPage !== 1 ? Math.round(pagiState.currentPage / pagiState.totalPages * 100) : 0,\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": 100,\n      \"aria-labelledby\": \"rpb-pagination\",\n      className: styleClassName.rpbProgressClassName,\n      style: {\n        width: pagiState.currentPage !== 1 ? Math.round(pagiState.currentPage / pagiState.totalPages * 100) + '%' : 0 + '%'\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nexport { Pagination };","map":{"version":3,"mappings":";;MAoCaA,UAAU,GAAiC,QAevD;EAAA,IAfwD;IACvDC,YADuD;IAEvDC,WAAW,GAAG,CAFyC;IAGvDC,UAHuD;IAIvDC,YAAY,GAAG,EAJwC;IAKvDC,UAAU,GAAG,IAL0C;IAMvDC,SAAS,GAAG,GAN2C;IAOvDC,SAAS,GAAG,GAP2C;IAQvDC,QAAQ,GAAG,IAR4C;IASvDC,cAAc,GAAG,CATsC;IAUvDC,eAAe,GAAG,KAVqC;IAWvDC,eAAe,GAAG,KAXqC;IAYvDC,aAAa,GAAG,KAZuC;IAavDC,qBAAqB,GAAG,KAb+B;IAcvDC,gBAAgB,GAAG;EAdoC,CAexD;;EACC,MAAMC,UAAU,GAAIC,OAAD,IAAiC;IAClD,OAAOC,MAAM,CAACC,OAAP,CAAeF,OAAf,EACJG,MADI,CACG;MAAA,IAAC,GAAGC,KAAH,CAAD;MAAA,OAAeA,KAAf;IAAA,CADH,EAEJC,GAFI,CAEA;MAAA,IAAC,CAACC,GAAD,CAAD;MAAA,OAAWA,GAAX;IAAA,CAFA,EAGJC,IAHI,CAGC,GAHD,CAAP;EAID,CALD;;EAOA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,EAA1C;EACA,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCF,QAAQ,CAAS,EAAT,CAApD;EAEA,MAAMG,cAAc,GAAG;IACrBC,gBAAgB,EAAEhB,gBAAgB,CAACgB,gBAAjB,IAAqC,UADlC;IAErBC,gBAAgB,EAAEjB,gBAAgB,CAACiB,gBAAjB,IAAqC,UAFlC;IAGrBC,sBAAsB,EACpBlB,gBAAgB,CAACkB,sBAAjB,IAA2C,kBAJxB;IAKrBC,uBAAuB,EACrBnB,gBAAgB,CAACmB,uBAAjB,IAA4C,oBANzB;IAOrBC,oBAAoB,EAClBpB,gBAAgB,CAACoB,oBAAjB,IAAyC,cARtB;IASrBC,kBAAkB,EAAErB,gBAAgB,CAACqB,kBAAjB,IAAuC;EATtC,CAAvB;;;;;EAeAC,SAAS,CAAC;IACRC,OAAO,CAACnC,WAAD,CAAP;EACD,CAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;;EAIA,MAAMmC,OAAO,GAAIC,IAAD,IAAa;;IAE3B,IACEA,IAAI,GAAG,CAAP,IACCd,SAAS,IAAIc,IAAI,GAAGd,SAAS,CAACe,UAD/B,IAEA,OAAOD,IAAP,KAAgB,QAFhB,IAGAE,KAAK,CAACF,IAAD,CAJP,EAKE;MACA;IACD,CAT0B;;;IAY3B,IAAIA,IAAI,KAAKpC,WAAb,EAA0B;MACxB;IACD,CAd0B;;;IAgB3BD,YAAY,CAACqC,IAAD,CAAZ;EACD,CAjBD;;EAmBA,MAAMG,SAAS,GAAGC,OAAO,CAAC;IACxB,MAAMH,UAAU,GAAWI,IAAI,CAACC,IAAL,CAAUzC,UAAU,GAAGC,YAAvB,CAA3B;IAEA,IAAIyC,SAAJ;IACA,IAAIC,OAAJ;;IAEA,IAAIP,UAAU,IAAI9B,cAAc,GAAG,CAAjB,GAAqB,CAAvC,EAA0C;MACxCoC,SAAS,GAAG,CAAZ;MACAC,OAAO,GAAGP,UAAV;IACD,CAHD,MAGO;MACL,IAAIrC,WAAW,IAAIO,cAAnB,EAAmC;QACjCoC,SAAS,GAAG,CAAZ;QACAC,OAAO,GAAGrC,cAAc,GAAG,CAAjB,GAAqB,CAA/B;MACD,CAHD,MAGO,IAAIP,WAAW,GAAGO,cAAd,IAAgC8B,UAApC,EAAgD;QACrDM,SAAS,GAAGN,UAAU,GAAG9B,cAAc,GAAG,CAA1C;QACAqC,OAAO,GAAGP,UAAV;MACD,CAHM,MAGA;QACLM,SAAS,GAAG3C,WAAW,GAAGO,cAA1B;QACAqC,OAAO,GAAG5C,WAAW,GAAGO,cAAxB;MACD;IACF;;IAED,OAAO,CAAC,GAAGsC,KAAK,CAACD,OAAO,GAAG,CAAV,GAAcD,SAAf,CAAL,CAA+BG,IAA/B,EAAJ,EAA2C3B,GAA3C,CAAgD4B,CAAD,IAAOJ,SAAS,GAAGI,CAAlE,CAAP;EACD,CAvBwB,EAuBtB,CAAC9C,UAAD,EAAaC,YAAb,EAA2BF,WAA3B,CAvBsB,CAAzB;EAyBAkC,SAAS,CAAC;IACRX,YAAY,CAAC;MACXyB,KAAK,EAAET,SADI;MAEXtC,UAAU,EAAEA,UAFD;MAGXD,WAAW,EAAEA,WAHF;MAIXiD,WAAW,EAAEV,SAAS,CAACW,MAJZ;MAKXb,UAAU,EAAEI,IAAI,CAACC,IAAL,CAAUzC,UAAU,GAAGC,YAAvB,CALD,CAKqC;;IALrC,CAAD,CAAZ;EAOD,CARQ,EAQN,CAACqC,SAAD,CARM,CAAT;;EAUA,MAAMY,sBAAsB,GAAG;IAC7B,MAAMjC,KAAK,GAAGkC,MAAM,CAAC3B,cAAD,CAApB;;IAEA,IAAIH,SAAJ,EAAe;MACb,IAAIJ,KAAK,IAAI,CAAb,EAAgB;QACdiB,OAAO,CAAC,CAAD,CAAP;MACD,CAFD,MAEO,IAAIjB,KAAK,GAAGI,SAAS,CAACe,UAAtB,EAAkC;QACvCF,OAAO,CAACb,SAAS,CAACe,UAAX,CAAP;MACD,CAFM,MAEA;QACLF,OAAO,CAACjB,KAAD,CAAP;MACD;IACF;EACF,CAZD;;EAcA,IAAII,SAAS,IAAIrB,UAAU,GAAGC,YAA9B,EAA4C;IAC1C,OACEmD;MAAKC,SAAS,EAAE3B,cAAc,CAACC;IAA/B,GACEyB;MACEE,EAAE,EAAC,gBADL;MACqB,cACP,uCAAuCjC,SAAS,CAACtB,WAAW;IAF1E,GAGG,CAACS,eAAD,IACC4C,0CACEA,gCACEA;MACEC,SAAS,EAAEzC,UAAU,CAAC;QACpB,CAACc,cAAc,CAACE,gBAAhB,GAAmC,IADf;QAEpB,CAACF,cAAc,CAACI,uBAAhB,GACET,SAAS,CAACtB,WAAV,KAA0B;MAHR,CAAD,CADvB;MAKI,cACU,kBANd;MAOEwD,OAAO,EAAE,MAAMrB,OAAO,CAAC,CAAD;IAPxB,GAQGhC,UARH,CADF,CADF,EAaEkD,gCACEA;MACEC,SAAS,EAAEzC,UAAU,CAAC;QACpB,CAACc,cAAc,CAACE,gBAAhB,GAAmC,IADf;QAEpB,CAACF,cAAc,CAACI,uBAAhB,GACET,SAAS,CAACtB,WAAV,KAA0B;MAHR,CAAD,CADvB;MAKI,cACU,qBANd;MAOEwD,OAAO,EAAE,MAAMrB,OAAO,CAACb,SAAS,CAACtB,WAAV,GAAwB,CAAzB;IAPxB,GAQGI,SARH,CADF,CAbF,CAJJ,EAgCG,CAACO,qBAAD,IACCW,SAAS,CAAC0B,KADX,IAEC1B,SAAS,CAAC0B,KAAV,CAAgB7B,GAAhB,CAAoB,CAACsC,UAAD,EAAaC,KAAb,KAClBL;MAAIjC,GAAG,EAAEsC;IAAT,GACEL;MAAA,cACc,cAAcI,UAAU,EADtC;MACwC,gBACxBnC,SAAS,CAACtB,WAAV,KAA0ByD,UAF1C;MAGED,OAAO,EAAE,MAAMrB,OAAO,CAACsB,UAAD,CAHxB;MAIEH,SAAS,EAAEzC,UAAU,CAAC;QACpB,CAACc,cAAc,CAACE,gBAAhB,GAAmC,IADf;QAEpB,CAACF,cAAc,CAACG,sBAAhB,GACER,SAAS,CAACtB,WAAV,KAA0ByD;MAHR,CAAD;IAJvB,GASGA,UATH,CADF,CADF,CAlCJ,EAiDG,CAAChD,eAAD,IACC4C,0CACEA,gCACEA;MACEG,OAAO,EAAE,MAAMrB,OAAO,CAACb,SAAS,CAACtB,WAAV,GAAwB,CAAzB,CADxB;MACmD,cACtC,iBAFb;MAGEsD,SAAS,EAAEzC,UAAU,CAAC;QACpB,CAACc,cAAc,CAACE,gBAAhB,GAAmC,IADf;QAEpB,CAACF,cAAc,CAACI,uBAAhB,GACET,SAAS,CAACtB,WAAV,KAA0BsB,SAAS,CAACe;MAHlB,CAAD;IAHvB,GAQGhC,SARH,CADF,CADF,EAaEgD,gCACEA;MACEC,SAAS,EAAEzC,UAAU,CAAC;QACpB,CAACc,cAAc,CAACE,gBAAhB,GAAmC,IADf;QAEpB,CAACF,cAAc,CAACI,uBAAhB,GACET,SAAS,CAACtB,WAAV,KAA0BsB,SAAS,CAACe;MAHlB,CAAD,CADvB;MAKI,cACU,iBANd;MAOEmB,OAAO,EAAE,MAAMrB,OAAO,CAACb,SAAS,CAACe,UAAX;IAPxB,GAQG/B,QARH,CADF,CAbF,CAlDJ,EA6EGI,aAAa,IACZ2C,0CACEA,gCACEA;MAAKC,SAAS,EAAE3B,cAAc,CAACM;IAA/B,GACEoB;MACEM,IAAI,EAAC,QADP;MAEEC,QAAQ,EAAGC,CAAD,IAAOnC,iBAAiB,CAACmC,CAAC,CAACC,MAAF,CAAS5C,KAAV;IAFpC,EADF,CADF,CADF,EASEmC,gCACEA;MACEC,SAAS,EAAE3B,cAAc,CAACE,gBAD5B;MAEE2B,OAAO,EAAEL;IAFX,GAEiC,IAFjC,CADF,CATF,CA9EJ,CADF,EAkGG3C,eAAe,IACd6C;MACEU,IAAI,EAAC,aADP;MACoB,iBAEhBzC,SAAS,CAACtB,WAAV,KAA0B,CAA1B,GACIyC,IAAI,CAACuB,KAAL,CACG1C,SAAS,CAACtB,WAAV,GAAwBsB,SAAS,CAACe,UAAnC,GAAiD,GADnD,CADJ,GAII,CAPR;MAOS,iBAEQ,CATjB;MASkB,iBACD,GAVjB;MAUoB,mBACF,gBAXlB;MAYEiB,SAAS,EAAE3B,cAAc,CAACK,oBAZ5B;MAaEiC,KAAK,EAAE;QACLC,KAAK,EACH5C,SAAS,CAACtB,WAAV,KAA0B,CAA1B,GACIyC,IAAI,CAACuB,KAAL,CACG1C,SAAS,CAACtB,WAAV,GAAwBsB,SAAS,CAACe,UAAnC,GAAiD,GADnD,IAEI,GAHR,GAII,IAAI;MANL;IAbT,EAnGJ,CADF;EA4HD,CA7HD,MA6HO;IACL,OAAO,IAAP;EACD;AACH","names":["Pagination","onPageChange","currentPage","totalItems","itemsPerPage","startLabel","prevLabel","nextLabel","endLabel","pageNeighbours","withProgressBar","onlyPageNumbers","withGoToInput","onlyPaginationButtons","customClassNames","classNames","classes","Object","entries","filter","value","map","key","join","pagiState","setPagiState","useState","goToInputValue","setGoToInputValue","styleClassName","rpbRootClassName","rpbItemClassName","rpbItemClassNameActive","rpbItemClassNameDisable","rpbProgressClassName","rpbGoItemClassName","useEffect","setPage","page","totalPages","isNaN","pagesList","useMemo","Math","ceil","startPage","endPage","Array","keys","i","pages","pagesLength","length","onGoToPageSubmitHandle","Number","React","className","id","onClick","mappedPage","index","type","onChange","e","target","role","round","style","width"],"sources":["C:\\Users\\yaelc\\PycharmProjects\\Pokedex\\client\\node_modules\\react-pagination-bar\\src\\Pagination.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\r\n\r\ntype RPBPagerState = {\r\n  totalItems: number;\r\n  currentPage: number;\r\n  pagesLength: number;\r\n  pages: number[];\r\n  totalPages: number;\r\n};\r\n\r\ntype RPBClassNamesCustomization = {\r\n  rpbRootClassName?: string;\r\n  rpbItemClassName?: string;\r\n  rpbItemClassNameActive?: string;\r\n  rpbItemClassNameDisable?: string;\r\n  rpbProgressClassName?: string;\r\n  rpbGoItemClassName?: string;\r\n};\r\n\r\ntype RPBPaginationProps = {\r\n  onPageChange: (pageNumber: number) => void;\r\n  currentPage: number;\r\n  totalItems: number;\r\n  itemsPerPage: number;\r\n  startLabel?: string | React.ReactNode;\r\n  prevLabel?: string | React.ReactNode;\r\n  nextLabel?: string | React.ReactNode;\r\n  endLabel?: string | React.ReactNode;\r\n  pageNeighbours?: number;\r\n  withProgressBar?: boolean;\r\n  onlyPageNumbers?: boolean;\r\n  onlyPaginationButtons?: boolean;\r\n  withGoToInput?: boolean;\r\n  customClassNames?: RPBClassNamesCustomization;\r\n};\r\n\r\nexport const Pagination: React.FC<RPBPaginationProps> = ({\r\n  onPageChange,\r\n  currentPage = 1,\r\n  totalItems,\r\n  itemsPerPage = 10,\r\n  startLabel = '<<',\r\n  prevLabel = '<',\r\n  nextLabel = '>',\r\n  endLabel = '>>',\r\n  pageNeighbours = 4,\r\n  withProgressBar = false,\r\n  onlyPageNumbers = false,\r\n  withGoToInput = false,\r\n  onlyPaginationButtons = false,\r\n  customClassNames = {},\r\n}) => {\r\n  const classNames = (classes: Record<string, boolean>): string => {\r\n    return Object.entries(classes)\r\n      .filter(([, value]) => value)\r\n      .map(([key]) => key)\r\n      .join(' ');\r\n  };\r\n\r\n  const [pagiState, setPagiState] = useState<RPBPagerState>();\r\n  const [goToInputValue, setGoToInputValue] = useState<string>('');\r\n\r\n  const styleClassName = {\r\n    rpbRootClassName: customClassNames.rpbRootClassName || 'rpb-root',\r\n    rpbItemClassName: customClassNames.rpbItemClassName || 'rpb-item',\r\n    rpbItemClassNameActive:\r\n      customClassNames.rpbItemClassNameActive || 'rpb-item--active',\r\n    rpbItemClassNameDisable:\r\n      customClassNames.rpbItemClassNameDisable || 'rpb-item--disabled',\r\n    rpbProgressClassName:\r\n      customClassNames.rpbProgressClassName || 'rpb-progress',\r\n    rpbGoItemClassName: customClassNames.rpbGoItemClassName || 'rpb-go-item',\r\n  } as Required<RPBClassNamesCustomization>;\r\n\r\n  /**\r\n   * Set new page when currentPage updates\r\n   */\r\n  useEffect(() => {\r\n    setPage(currentPage);\r\n  }, [currentPage]);\r\n\r\n  const setPage = (page: number): void => {\r\n    // Disable clicking on a non-existent page\r\n    if (\r\n      page < 1 ||\r\n      (pagiState && page > pagiState.totalPages) ||\r\n      typeof page !== 'number' ||\r\n      isNaN(page)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Remove the first rendering, and also cancel the click on the active page\r\n    if (page === currentPage) {\r\n      return;\r\n    }\r\n    // Send current page outside component\r\n    onPageChange(page);\r\n  };\r\n\r\n  const pagesList = useMemo((): number[] => {\r\n    const totalPages: number = Math.ceil(totalItems / itemsPerPage);\r\n\r\n    let startPage: number;\r\n    let endPage: number;\r\n\r\n    if (totalPages <= pageNeighbours * 2 + 1) {\r\n      startPage = 1;\r\n      endPage = totalPages;\r\n    } else {\r\n      if (currentPage <= pageNeighbours) {\r\n        startPage = 1;\r\n        endPage = pageNeighbours * 2 + 1;\r\n      } else if (currentPage + pageNeighbours >= totalPages) {\r\n        startPage = totalPages - pageNeighbours * 2;\r\n        endPage = totalPages;\r\n      } else {\r\n        startPage = currentPage - pageNeighbours;\r\n        endPage = currentPage + pageNeighbours;\r\n      }\r\n    }\r\n\r\n    return [...Array(endPage + 1 - startPage).keys()].map((i) => startPage + i);\r\n  }, [totalItems, itemsPerPage, currentPage]);\r\n\r\n  useEffect(() => {\r\n    setPagiState({\r\n      pages: pagesList,\r\n      totalItems: totalItems,\r\n      currentPage: currentPage,\r\n      pagesLength: pagesList.length, // current rendered pages list length\r\n      totalPages: Math.ceil(totalItems / itemsPerPage), // all pages list length\r\n    });\r\n  }, [pagesList]);\r\n\r\n  const onGoToPageSubmitHandle = (): void => {\r\n    const value = Number(goToInputValue);\r\n\r\n    if (pagiState) {\r\n      if (value <= 0) {\r\n        setPage(1);\r\n      } else if (value > pagiState.totalPages) {\r\n        setPage(pagiState.totalPages);\r\n      } else {\r\n        setPage(value);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (pagiState && totalItems > itemsPerPage) {\r\n    return (\r\n      <nav className={styleClassName.rpbRootClassName}>\r\n        <ul\r\n          id=\"rpb-pagination\"\r\n          aria-label={`Pagination Navigation, Current Page ${pagiState.currentPage}`}>\r\n          {!onlyPageNumbers && (\r\n            <>\r\n              <li>\r\n                <button\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameDisable]:\r\n                      pagiState.currentPage === 1,\r\n                  })}\r\n                  aria-label={'Go to first page'}\r\n                  onClick={() => setPage(1)}>\r\n                  {startLabel}\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameDisable]:\r\n                      pagiState.currentPage === 1,\r\n                  })}\r\n                  aria-label={'Go to previous page'}\r\n                  onClick={() => setPage(pagiState.currentPage - 1)}>\r\n                  {prevLabel}\r\n                </button>\r\n              </li>\r\n            </>\r\n          )}\r\n\r\n          {!onlyPaginationButtons &&\r\n            pagiState.pages &&\r\n            pagiState.pages.map((mappedPage, index) => (\r\n              <li key={index}>\r\n                <button\r\n                  aria-label={`Go to Page ${mappedPage}`}\r\n                  aria-current={pagiState.currentPage === mappedPage}\r\n                  onClick={() => setPage(mappedPage)}\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameActive]:\r\n                      pagiState.currentPage === mappedPage,\r\n                  })}>\r\n                  {mappedPage}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          {!onlyPageNumbers && (\r\n            <>\r\n              <li>\r\n                <button\r\n                  onClick={() => setPage(pagiState.currentPage + 1)}\r\n                  aria-label=\"Go to next page\"\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameDisable]:\r\n                      pagiState.currentPage === pagiState.totalPages,\r\n                  })}>\r\n                  {nextLabel}\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameDisable]:\r\n                      pagiState.currentPage === pagiState.totalPages,\r\n                  })}\r\n                  aria-label={'Go to last page'}\r\n                  onClick={() => setPage(pagiState.totalPages)}>\r\n                  {endLabel}\r\n                </button>\r\n              </li>\r\n            </>\r\n          )}\r\n          {withGoToInput && (\r\n            <>\r\n              <li>\r\n                <div className={styleClassName.rpbGoItemClassName}>\r\n                  <input\r\n                    type=\"number\"\r\n                    onChange={(e) => setGoToInputValue(e.target.value)}\r\n                  />\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={styleClassName.rpbItemClassName}\r\n                  onClick={onGoToPageSubmitHandle}>\r\n                  Go\r\n                </button>\r\n              </li>\r\n            </>\r\n          )}\r\n        </ul>\r\n        {withProgressBar && (\r\n          <div\r\n            role=\"progressbar\"\r\n            aria-valuenow={\r\n              pagiState.currentPage !== 1\r\n                ? Math.round(\r\n                    (pagiState.currentPage / pagiState.totalPages) * 100\r\n                  )\r\n                : 0\r\n            }\r\n            aria-valuemin={0}\r\n            aria-valuemax={100}\r\n            aria-labelledby=\"rpb-pagination\"\r\n            className={styleClassName.rpbProgressClassName}\r\n            style={{\r\n              width:\r\n                pagiState.currentPage !== 1\r\n                  ? Math.round(\r\n                      (pagiState.currentPage / pagiState.totalPages) * 100\r\n                    ) + '%'\r\n                  : 0 + '%',\r\n            }}></div>\r\n        )}\r\n      </nav>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}