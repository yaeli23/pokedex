{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yaelc\\\\PycharmProjects\\\\Pokedex\\\\client\\\\src\\\\components\\\\Pagination.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport './pagination.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst usePagination = _ref => {\n  _s();\n\n  let {\n    totalCount,\n    pageSize,\n    siblingCount = 1,\n    currentPage\n  } = _ref;\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize); // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\n\n    const totalPageNumbers = siblingCount + 5;\n    /*\r\n      Case 1:\r\n      If the number of pages is less than the page numbers we want to show in our\r\n      paginationComponent, we return the range [1..totalPageCount]\r\n    */\n\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n    /*\r\n    \tCalculate left and right sibling index and make sure they are within range 1 and totalPageCount\r\n    */\n\n\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n    /*\r\n      We do not show dots just when there is just one page number to be inserted between the extremes of sibling and the page limits i.e 1 and totalPageCount. Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\r\n    */\n\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n    /*\r\n    \tCase 2: No left dots to show, but rights dots to be shown\r\n    */\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      let leftItemCount = 3 + 2 * siblingCount;\n      let leftRange = range(1, leftItemCount);\n      return [...leftRange, DOTS, totalPageCount];\n    }\n    /*\r\n    \tCase 3: No right dots to show, but left dots to be shown\r\n    */\n\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      let rightItemCount = 3 + 2 * siblingCount;\n      let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n    /*\r\n    \tCase 4: Both left and right dots to be shown\r\n    */\n\n\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n  return paginationRange;\n};\n\n_s(usePagination, \"tLviJI6rwkyze3+kNwkFLwjvB48=\");\n\nconst Pagination = props => {\n  _s2();\n\n  const {\n    onPageChange,\n    totalCount,\n    siblingCount = 1,\n    currentPage,\n    pageSize,\n    className\n  } = props;\n  const paginationRange = usePagination({\n    currentPage,\n    totalCount,\n    siblingCount,\n    pageSize\n  }); // If there are less than 2 times in pagination range we shall not render the component\n\n  if (currentPage === 0 || paginationRange.length < 2) {\n    return null;\n  }\n\n  const onNext = () => {\n    onPageChange(currentPage + 1);\n  };\n\n  const onPrevious = () => {\n    onPageChange(currentPage - 1);\n  };\n\n  let lastPage = paginationRange[paginationRange.length - 1];\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: classnames('pagination-container', {\n      [className]: className\n    }),\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      className: classnames('pagination-item', {\n        disabled: currentPage === 1\n      }),\n      onClick: onPrevious,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arrow left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), paginationRange.map(pageNumber => {\n      // If the pageItem is a DOT, render the DOTS unicode character\n      if (pageNumber === DOTS) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"pagination-item dots\",\n          children: \"\\u2026\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 18\n        }, this);\n      } // Render our Page Pills\n\n\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: classnames('pagination-item', {\n          selected: pageNumber === currentPage\n        }),\n        onClick: () => onPageChange(pageNumber),\n        children: pageNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"li\", {\n      className: classnames('pagination-item', {\n        disabled: currentPage === lastPage\n      }),\n      onClick: onNext,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arrow right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Pagination, \"19HqfiXoIUMweeBbakf/FHNBwW4=\", false, function () {\n  return [usePagination];\n});\n\n_c = Pagination;\nexport default Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["React","classnames","usePagination","totalCount","pageSize","siblingCount","currentPage","paginationRange","useMemo","totalPageCount","Math","ceil","totalPageNumbers","range","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","DOTS","rightItemCount","rightRange","middleRange","Pagination","props","onPageChange","className","length","onNext","onPrevious","lastPage","disabled","map","pageNumber","selected"],"sources":["C:/Users/yaelc/PycharmProjects/Pokedex/client/src/components/Pagination.js"],"sourcesContent":["import React from 'react';\r\nimport classnames from 'classnames';\r\nimport './pagination.scss';\r\n const usePagination = ({\r\n  totalCount,\r\n  pageSize,\r\n  siblingCount = 1,\r\n  currentPage\r\n}) => {\r\n  const paginationRange = useMemo(() => {\r\n    const totalPageCount = Math.ceil(totalCount / pageSize);\r\n\r\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\r\n    const totalPageNumbers = siblingCount + 5;\r\n\r\n    /*\r\n      Case 1:\r\n      If the number of pages is less than the page numbers we want to show in our\r\n      paginationComponent, we return the range [1..totalPageCount]\r\n    */\r\n    if (totalPageNumbers >= totalPageCount) {\r\n      return range(1, totalPageCount);\r\n    }\r\n\r\n    /*\r\n    \tCalculate left and right sibling index and make sure they are within range 1 and totalPageCount\r\n    */\r\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n    const rightSiblingIndex = Math.min(\r\n      currentPage + siblingCount,\r\n      totalPageCount\r\n    );\r\n\r\n    /*\r\n      We do not show dots just when there is just one page number to be inserted between the extremes of sibling and the page limits i.e 1 and totalPageCount. Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\r\n    */\r\n    const shouldShowLeftDots = leftSiblingIndex > 2;\r\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n    const firstPageIndex = 1;\r\n    const lastPageIndex = totalPageCount;\r\n\r\n    /*\r\n    \tCase 2: No left dots to show, but rights dots to be shown\r\n    */\r\n    if (!shouldShowLeftDots && shouldShowRightDots) {\r\n      let leftItemCount = 3 + 2 * siblingCount;\r\n      let leftRange = range(1, leftItemCount);\r\n\r\n      return [...leftRange, DOTS, totalPageCount];\r\n    }\r\n\r\n    /*\r\n    \tCase 3: No right dots to show, but left dots to be shown\r\n    */\r\n    if (shouldShowLeftDots && !shouldShowRightDots) {\r\n\r\n      let rightItemCount = 3 + 2 * siblingCount;\r\n      let rightRange = range(\r\n        totalPageCount - rightItemCount + 1,\r\n        totalPageCount\r\n      );\r\n      return [firstPageIndex, DOTS, ...rightRange];\r\n    }\r\n\r\n    /*\r\n    \tCase 4: Both left and right dots to be shown\r\n    */\r\n    if (shouldShowLeftDots && shouldShowRightDots) {\r\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\r\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n    }\r\n  }, [totalCount, pageSize, siblingCount, currentPage]);\r\n\r\n  return paginationRange;\r\n};\r\nconst Pagination = props => {\r\n  const {\r\n    onPageChange,\r\n    totalCount,\r\n    siblingCount = 1,\r\n    currentPage,\r\n    pageSize,\r\n    className\r\n  } = props;\r\n\r\n  const paginationRange = usePagination({\r\n    currentPage,\r\n    totalCount,\r\n    siblingCount,\r\n    pageSize\r\n  });\r\n\r\n  // If there are less than 2 times in pagination range we shall not render the component\r\n  if (currentPage === 0 || paginationRange.length < 2) {\r\n    return null;\r\n  }\r\n\r\n  const onNext = () => {\r\n    onPageChange(currentPage + 1);\r\n  };\r\n\r\n  const onPrevious = () => {\r\n    onPageChange(currentPage - 1);\r\n  };\r\n\r\n  let lastPage = paginationRange[paginationRange.length - 1];\r\n  return (\r\n    <ul\r\n      className={classnames('pagination-container', { [className]: className })}\r\n    >\r\n       {/* Left navigation arrow */}\r\n      <li\r\n        className={classnames('pagination-item', {\r\n          disabled: currentPage === 1\r\n        })}\r\n        onClick={onPrevious}\r\n      >\r\n        <div className=\"arrow left\" />\r\n      </li>\r\n      {paginationRange.map(pageNumber => {\r\n\r\n        // If the pageItem is a DOT, render the DOTS unicode character\r\n        if (pageNumber === DOTS) {\r\n          return <li className=\"pagination-item dots\">&#8230;</li>;\r\n        }\r\n\r\n        // Render our Page Pills\r\n        return (\r\n          <li\r\n            className={classnames('pagination-item', {\r\n              selected: pageNumber === currentPage\r\n            })}\r\n            onClick={() => onPageChange(pageNumber)}\r\n          >\r\n            {pageNumber}\r\n          </li>\r\n        );\r\n      })}\r\n      {/*  Right Navigation arrow */}\r\n      <li\r\n        className={classnames('pagination-item', {\r\n          disabled: currentPage === lastPage\r\n        })}\r\n        onClick={onNext}\r\n      >\r\n        <div className=\"arrow right\" />\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Pagination;"],"mappings":"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"},"metadata":{},"sourceType":"module"}