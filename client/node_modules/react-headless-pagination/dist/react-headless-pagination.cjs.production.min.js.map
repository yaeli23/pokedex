{"version":3,"file":"react-headless-pagination.cjs.production.min.js","sources":["../src/Hooks/usePagination.ts","../src/Pagination/Pagination.tsx"],"sourcesContent":["import React from \"react\";\nimport { IPaginationProps, IUsePagination } from \"../types/types\";\n\nconst usePagination = ({\n  currentPage,\n  setCurrentPage,\n  truncableText = \"...\",\n  truncableClassName = \"\",\n  totalPages,\n  edgePageCount,\n  middlePagesSiblingCount,\n}: IPaginationProps): IUsePagination => {\n  const pages = Array(totalPages)\n    .fill(0)\n    .map((_, i) => i + 1);\n\n  const hasPreviousPage = currentPage > 1;\n  const hasNextPage = currentPage < totalPages;\n\n  const isReachedToFirst = currentPage <= middlePagesSiblingCount;\n  const isReachedToLast = currentPage + middlePagesSiblingCount >= totalPages;\n\n  const middlePages = React.useMemo(() => {\n    const middlePageCount = middlePagesSiblingCount * 2 + 1;\n    if (isReachedToFirst) {\n      return pages.slice(0, middlePageCount);\n    }\n    if (isReachedToLast) {\n      return pages.slice(-middlePageCount);\n    }\n    return pages.slice(\n      currentPage - middlePagesSiblingCount,\n      currentPage + middlePagesSiblingCount + 1,\n    );\n  }, [currentPage, pages]);\n\n  const getAllPreviousPages = () => {\n    return pages.slice(0, middlePages[0] - 1);\n  };\n\n  const previousPages = React.useMemo(() => {\n    if (isReachedToFirst || getAllPreviousPages().length < 1) {\n      return [];\n    }\n    return pages\n      .slice(0, edgePageCount)\n      .filter((p) => !middlePages.includes(p));\n  }, [currentPage, pages]);\n\n  const getAllNextPages = React.useMemo(() => {\n    return pages.slice(\n      middlePages[middlePages.length - 1],\n      pages[pages.length],\n    );\n  }, [pages, middlePages]);\n\n  const nextPages = React.useMemo(() => {\n    if (isReachedToLast) {\n      return [];\n    }\n    if (getAllNextPages.length < 1) {\n      return [];\n    }\n    return pages\n      .slice(pages.length - edgePageCount, pages.length)\n      .filter((p) => !middlePages.includes(p));\n  }, [middlePages, pages]);\n\n  const isPreviousTruncable = React.useMemo(() => {\n    // Is truncable if first value of middlePage is larger than last value of previousPages\n    return middlePages[0] > previousPages[previousPages.length - 1] + 1;\n  }, [previousPages, middlePages]);\n\n  const isNextTruncable = React.useMemo(() => {\n    // Is truncable if last value of middlePage is larger than first value of previousPages\n    return middlePages[middlePages.length - 1] + 1 < nextPages[0];\n  }, [nextPages, middlePages]);\n\n  return {\n    currentPage,\n    setCurrentPage,\n    truncableText,\n    truncableClassName,\n    pages,\n    hasPreviousPage,\n    hasNextPage,\n    previousPages,\n    isPreviousTruncable,\n    middlePages,\n    isNextTruncable,\n    nextPages,\n  };\n};\n\nexport default usePagination;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport usePagination from \"../Hooks/usePagination\";\nimport {\n  IPagination,\n  IPaginationProps,\n  ButtonProps,\n  PageButtonProps,\n} from \"../types/types\";\n\nexport const PrevButton = ({\n  className,\n  children,\n  dataTestId,\n  as = <button />,\n  ...buttonProps\n}: ButtonProps) => {\n  const pagination = React.useContext(PaginationContext);\n  const previous = () => {\n    if (pagination.currentPage + 1 > 1) {\n      pagination.setCurrentPage(pagination.currentPage - 1);\n    }\n  };\n\n  const disabled = pagination.currentPage === 0;\n\n  return (\n    <as.type\n      {...buttonProps}\n      {...as.props}\n      className={classNames(className, as.props.className)}\n      onClick={() => previous()}\n      tabIndex={disabled ? \"-1\" : 0}\n      disabled={disabled}\n      data-testid={dataTestId}\n      onKeyPress={(event: React.KeyboardEvent) => {\n        event.preventDefault();\n        if (event.key === \"Enter\" && !disabled) {\n          previous();\n        }\n      }}\n    >\n      {as.props.children ?? children}\n    </as.type>\n  );\n};\n\nexport const NextButton = ({\n  className,\n  children,\n  dataTestId,\n  as = <button />,\n  ...buttonProps\n}: ButtonProps) => {\n  const pagination = React.useContext(PaginationContext);\n  const next = () => {\n    if (pagination.currentPage + 1 < pagination.pages.length) {\n      pagination.setCurrentPage(pagination.currentPage + 1);\n    }\n  };\n\n  const disabled = pagination.currentPage === pagination.pages.length - 1;\n\n  return (\n    <as.type\n      {...buttonProps}\n      {...as.props}\n      className={classNames(className, as.props.className)}\n      onClick={() => next()}\n      tabIndex={disabled ? \"-1\" : 0}\n      disabled={disabled}\n      data-testid={dataTestId}\n      onKeyPress={(event: React.KeyboardEvent) => {\n        event.preventDefault();\n        if (event.key === \"Enter\" && !disabled) {\n          next();\n        }\n      }}\n    >\n      {as.props.children ?? children}\n    </as.type>\n  );\n};\n\ntype ITruncableElementProps = {\n  prev?: boolean;\n};\n\nconst TruncableElement = ({ prev }: ITruncableElementProps) => {\n  const pagination: IPagination = React.useContext(PaginationContext);\n\n  const {\n    isPreviousTruncable,\n    isNextTruncable,\n    truncableText,\n    truncableClassName,\n  } = pagination;\n\n  return (isPreviousTruncable && prev === true) ||\n    (isNextTruncable && !prev) ? (\n      <li className={truncableClassName || undefined}>{truncableText}</li>\n    ) : null;\n};\n\nexport const PageButton = ({\n  as = <a />,\n  className,\n  dataTestIdActive,\n  dataTestIdInactive,\n  activeClassName,\n  inactiveClassName,\n}: PageButtonProps) => {\n  const pagination: IPagination = React.useContext(PaginationContext);\n\n  const renderPageButton = (page: number) => (\n    <li key={page}>\n      <as.type\n        data-testid={\n          classNames({\n            [`${dataTestIdActive}`]:\n              dataTestIdActive && pagination.currentPage + 1 === page,\n            [`${dataTestIdInactive}-${page}`]:\n              dataTestIdActive && pagination.currentPage + 1 !== page,\n          }) || undefined\n        }\n        tabIndex={0}\n        onKeyPress={(event: React.KeyboardEvent) => {\n          if (event.key === \"Enter\") {\n            pagination.setCurrentPage(page - 1);\n          }\n        }}\n        onClick={() => pagination.setCurrentPage(page - 1)}\n        className={classNames(\n          className,\n          pagination.currentPage + 1 === page\n            ? activeClassName\n            : inactiveClassName,\n        )}\n        {...as.props}\n      >\n        {page}\n      </as.type>\n    </li>\n  );\n\n  return (\n    <>\n      {pagination.previousPages.map(renderPageButton)}\n      <TruncableElement prev />\n      {pagination.middlePages.map(renderPageButton)}\n      <TruncableElement />\n      {pagination.nextPages.map(renderPageButton)}\n    </>\n  );\n};\n\nconst defaultState: IPagination = {\n  currentPage: 0,\n  setCurrentPage: () => { },\n  truncableText: \"...\",\n  truncableClassName: \"\",\n  pages: [],\n  hasPreviousPage: false,\n  hasNextPage: false,\n  previousPages: [],\n  isPreviousTruncable: false,\n  middlePages: [],\n  isNextTruncable: false,\n  nextPages: [],\n};\n\nconst PaginationContext: React.Context<IPagination> =\n  React.createContext<IPagination>(defaultState);\n\nexport const Pagination = ({\n  dataTestId,\n  ...paginationProps\n}: IPaginationProps & { dataTestId?: string }) => {\n  const pagination = usePagination(paginationProps);\n\n  return (\n    <PaginationContext.Provider value={pagination}>\n      <div className={paginationProps.className} data-testid={dataTestId}>\n        {paginationProps.children}\n      </div>\n    </PaginationContext.Provider>\n  );\n};\n\nPagination.PrevButton = PrevButton;\nPagination.NextButton = NextButton;\nPagination.PageButton = PageButton;\n"],"names":["PrevButton","className","children","dataTestId","as","React","buttonProps","pagination","useContext","PaginationContext","previous","currentPage","setCurrentPage","disabled","type","props","classNames","onClick","tabIndex","onKeyPress","event","preventDefault","key","NextButton","next","pages","length","TruncableElement","prev","isPreviousTruncable","isNextTruncable","truncableClassName","undefined","truncableText","PageButton","dataTestIdActive","dataTestIdInactive","activeClassName","inactiveClassName","renderPageButton","page","previousPages","map","middlePages","nextPages","createContext","hasPreviousPage","hasNextPage","Pagination","totalPages","edgePageCount","middlePagesSiblingCount","isReachedToFirst","isReachedToLast","getAllNextPages","paginationProps","Array","fill","_","i","useMemo","middlePageCount","slice","filter","p","includes","Provider","value"],"mappings":"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"}