import React from 'react';
import classNames from 'classnames';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var usePagination = function usePagination(_ref) {
  var currentPage = _ref.currentPage,
      setCurrentPage = _ref.setCurrentPage,
      _ref$truncableText = _ref.truncableText,
      truncableText = _ref$truncableText === void 0 ? "..." : _ref$truncableText,
      _ref$truncableClassNa = _ref.truncableClassName,
      truncableClassName = _ref$truncableClassNa === void 0 ? "" : _ref$truncableClassNa,
      totalPages = _ref.totalPages,
      edgePageCount = _ref.edgePageCount,
      middlePagesSiblingCount = _ref.middlePagesSiblingCount;
  var pages = Array(totalPages).fill(0).map(function (_, i) {
    return i + 1;
  });
  var hasPreviousPage = currentPage > 1;
  var hasNextPage = currentPage < totalPages;
  var isReachedToFirst = currentPage <= middlePagesSiblingCount;
  var isReachedToLast = currentPage + middlePagesSiblingCount >= totalPages;
  var middlePages = React.useMemo(function () {
    var middlePageCount = middlePagesSiblingCount * 2 + 1;

    if (isReachedToFirst) {
      return pages.slice(0, middlePageCount);
    }

    if (isReachedToLast) {
      return pages.slice(-middlePageCount);
    }

    return pages.slice(currentPage - middlePagesSiblingCount, currentPage + middlePagesSiblingCount + 1);
  }, [currentPage, pages]);

  var getAllPreviousPages = function getAllPreviousPages() {
    return pages.slice(0, middlePages[0] - 1);
  };

  var previousPages = React.useMemo(function () {
    if (isReachedToFirst || getAllPreviousPages().length < 1) {
      return [];
    }

    return pages.slice(0, edgePageCount).filter(function (p) {
      return !middlePages.includes(p);
    });
  }, [currentPage, pages]);
  var getAllNextPages = React.useMemo(function () {
    return pages.slice(middlePages[middlePages.length - 1], pages[pages.length]);
  }, [pages, middlePages]);
  var nextPages = React.useMemo(function () {
    if (isReachedToLast) {
      return [];
    }

    if (getAllNextPages.length < 1) {
      return [];
    }

    return pages.slice(pages.length - edgePageCount, pages.length).filter(function (p) {
      return !middlePages.includes(p);
    });
  }, [middlePages, pages]);
  var isPreviousTruncable = React.useMemo(function () {
    // Is truncable if first value of middlePage is larger than last value of previousPages
    return middlePages[0] > previousPages[previousPages.length - 1] + 1;
  }, [previousPages, middlePages]);
  var isNextTruncable = React.useMemo(function () {
    // Is truncable if last value of middlePage is larger than first value of previousPages
    return middlePages[middlePages.length - 1] + 1 < nextPages[0];
  }, [nextPages, middlePages]);
  return {
    currentPage: currentPage,
    setCurrentPage: setCurrentPage,
    truncableText: truncableText,
    truncableClassName: truncableClassName,
    pages: pages,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    previousPages: previousPages,
    isPreviousTruncable: isPreviousTruncable,
    middlePages: middlePages,
    isNextTruncable: isNextTruncable,
    nextPages: nextPages
  };
};

var PrevButton = function PrevButton(_ref) {
  var _as$props$children;

  var className = _ref.className,
      children = _ref.children,
      dataTestId = _ref.dataTestId,
      _ref$as = _ref.as,
      as = _ref$as === void 0 ? React.createElement("button", null) : _ref$as,
      buttonProps = _objectWithoutPropertiesLoose(_ref, ["className", "children", "dataTestId", "as"]);

  var pagination = React.useContext(PaginationContext);

  var previous = function previous() {
    if (pagination.currentPage + 1 > 1) {
      pagination.setCurrentPage(pagination.currentPage - 1);
    }
  };

  var disabled = pagination.currentPage === 0;
  return React.createElement(as.type, Object.assign({}, buttonProps, as.props, {
    className: classNames(className, as.props.className),
    onClick: function onClick() {
      return previous();
    },
    tabIndex: disabled ? "-1" : 0,
    disabled: disabled,
    "data-testid": dataTestId,
    onKeyPress: function onKeyPress(event) {
      event.preventDefault();

      if (event.key === "Enter" && !disabled) {
        previous();
      }
    }
  }), (_as$props$children = as.props.children) != null ? _as$props$children : children);
};
var NextButton = function NextButton(_ref2) {
  var _as$props$children2;

  var className = _ref2.className,
      children = _ref2.children,
      dataTestId = _ref2.dataTestId,
      _ref2$as = _ref2.as,
      as = _ref2$as === void 0 ? React.createElement("button", null) : _ref2$as,
      buttonProps = _objectWithoutPropertiesLoose(_ref2, ["className", "children", "dataTestId", "as"]);

  var pagination = React.useContext(PaginationContext);

  var next = function next() {
    if (pagination.currentPage + 1 < pagination.pages.length) {
      pagination.setCurrentPage(pagination.currentPage + 1);
    }
  };

  var disabled = pagination.currentPage === pagination.pages.length - 1;
  return React.createElement(as.type, Object.assign({}, buttonProps, as.props, {
    className: classNames(className, as.props.className),
    onClick: function onClick() {
      return next();
    },
    tabIndex: disabled ? "-1" : 0,
    disabled: disabled,
    "data-testid": dataTestId,
    onKeyPress: function onKeyPress(event) {
      event.preventDefault();

      if (event.key === "Enter" && !disabled) {
        next();
      }
    }
  }), (_as$props$children2 = as.props.children) != null ? _as$props$children2 : children);
};

var TruncableElement = function TruncableElement(_ref3) {
  var prev = _ref3.prev;
  var pagination = React.useContext(PaginationContext);
  var isPreviousTruncable = pagination.isPreviousTruncable,
      isNextTruncable = pagination.isNextTruncable,
      truncableText = pagination.truncableText,
      truncableClassName = pagination.truncableClassName;
  return isPreviousTruncable && prev === true || isNextTruncable && !prev ? React.createElement("li", {
    className: truncableClassName || undefined
  }, truncableText) : null;
};

var PageButton = function PageButton(_ref4) {
  var _ref4$as = _ref4.as,
      as = _ref4$as === void 0 ? React.createElement("a", null) : _ref4$as,
      className = _ref4.className,
      dataTestIdActive = _ref4.dataTestIdActive,
      dataTestIdInactive = _ref4.dataTestIdInactive,
      activeClassName = _ref4.activeClassName,
      inactiveClassName = _ref4.inactiveClassName;
  var pagination = React.useContext(PaginationContext);

  var renderPageButton = function renderPageButton(page) {
    var _classNames;

    return React.createElement("li", {
      key: page
    }, React.createElement(as.type, Object.assign({
      "data-testid": classNames((_classNames = {}, _classNames["" + dataTestIdActive] = dataTestIdActive && pagination.currentPage + 1 === page, _classNames[dataTestIdInactive + "-" + page] = dataTestIdActive && pagination.currentPage + 1 !== page, _classNames)) || undefined,
      tabIndex: 0,
      onKeyPress: function onKeyPress(event) {
        if (event.key === "Enter") {
          pagination.setCurrentPage(page - 1);
        }
      },
      onClick: function onClick() {
        return pagination.setCurrentPage(page - 1);
      },
      className: classNames(className, pagination.currentPage + 1 === page ? activeClassName : inactiveClassName)
    }, as.props), page));
  };

  return React.createElement(React.Fragment, null, pagination.previousPages.map(renderPageButton), React.createElement(TruncableElement, {
    prev: true
  }), pagination.middlePages.map(renderPageButton), React.createElement(TruncableElement, null), pagination.nextPages.map(renderPageButton));
};
var defaultState = {
  currentPage: 0,
  setCurrentPage: function setCurrentPage() {},
  truncableText: "...",
  truncableClassName: "",
  pages: [],
  hasPreviousPage: false,
  hasNextPage: false,
  previousPages: [],
  isPreviousTruncable: false,
  middlePages: [],
  isNextTruncable: false,
  nextPages: []
};
var PaginationContext = /*#__PURE__*/React.createContext(defaultState);
var Pagination = function Pagination(_ref5) {
  var dataTestId = _ref5.dataTestId,
      paginationProps = _objectWithoutPropertiesLoose(_ref5, ["dataTestId"]);

  var pagination = usePagination(paginationProps);
  return React.createElement(PaginationContext.Provider, {
    value: pagination
  }, React.createElement("div", {
    className: paginationProps.className,
    "data-testid": dataTestId
  }, paginationProps.children));
};
Pagination.PrevButton = PrevButton;
Pagination.NextButton = NextButton;
Pagination.PageButton = PageButton;

export { NextButton, PageButton, Pagination, PrevButton };
//# sourceMappingURL=react-headless-pagination.esm.js.map
